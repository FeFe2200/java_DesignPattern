상속을 사용하는 목적의 의해서 나뉨

서브클래싱(subclassing) - 다른 클래스 코드 재사용을 목적으로 함. 행동이 호환되지 않으므로 자신이 부모의 인스턴스를 대체할 수 없다.
 == 구현상속 implementation inheritance 클래스상속 class inheritance


서브타이핑(subtyping) - 타입 계층을 구성하기 위한 목적. 행동이 호환되기 때문에 자식 클래스의 인스턴스가 부모클래스 인스턴스를 대체할 수 있다.
 == 인터페이스 상속 Interface inheritance

 아래 설명을 통해 이해해 보자
 타입을 구현하는 일반적인 방법, 클래스를 이용. 타입 계층을 구현하는 일반적인 방법, 상속을 이용

- 언제 상속을 사용해야 하는가?
 --마틴 오더스키의 두가지 질문
    상속 관계가 is-a 관계를 모델링하는가?
    클라이언트 입장에서 부모클래스의 타입으로 자식 클래스를 사용해도 무방한가? (부모 자식사이 행동 호환성)

 -is-a 관계
 어휘적 정의가 아닌 기대되는 행동에 따라 타입계층의 의미가 달라질 수 있음.
 슈퍼타입과 서브타입 관계에서는 행동 호환성이 중요

- 행동 호환성
 두 타입 사이에 행동이 호환될 경우에만 타입계층으로 묶어야 한다.
 동일한 메서드를 구현하면 행동을 호환하는것인가?
 판단하는 기준은 클라이언트의 관점이다.
 타입계층이 사용될 문맥을 이해하는 것이 중요하다.

- 클라이언트의 기대에 따라 계층 분리하기
 날수 있는 새와 날수 없는 새 분리, 행동을 기반으로 한 인터페이스 생성
 날수없는 새에게 fly메시지를 던질 수 없게 만듬.
 인터페이스를 클라이언트가 기대하는 것에 따라 분리 -> 인터페이스 분리 원칙(Interface Segregation Principle, ISP)
 더 좋은 방법을 합성을 사용하는 것.
 두 클래스 사이 행동이 호환되지 않으면 올바른 타입계층이 아니므로 상속을 쓰면 안됨.